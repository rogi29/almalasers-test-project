{"version":3,"sources":["queries/explorePictures.ts","globals.tsx","utils/arrayUtils.ts","components/tree/TreeNode.tsx","components/tree/Tree.tsx","modals/FileStructure.ts","utils/pathUtils.ts","components/containers/TreeContainer.tsx","pages/HomePage.tsx","hooks/useQuery.ts","components/layouts/Grid.tsx","components/layouts/Cell.tsx","components/layouts/ThumbnailGrid.tsx","components/gallery/Image.tsx","components/gallery/Gallery.tsx","components/layouts/PageLayout.tsx","components/containers/GalleryContainer.tsx","pages/PicturePage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultConfig","method","headers","DEFAULT_PATH_PARAM","getURL","path","URL","explorePictures","init","fetch","toString","then","res","json","data","filterAndJoinArray","array","separator","filter","v","join","TreeNode","styled","button","attrs","className","isRoot","selected","expandable","classnames","level","index","undefined","Tree","nodeList","selectedPaths","handleNodeClick","currIndex","prevLevel","indexOf","children","onClick","parentPath","node","label","type","map","buildPath","root","TreeContainer","redirect","useState","setSelectedPaths","currentPath","setCurrentPath","setNodeList","useSWR","error","getNodeByPath","find","useEffect","alert","message","metadata","forEach","push","isOpen","list","sliced","slice","length","toggleFolder","HomePage","history","useHistory","useQuery","URLSearchParams","useLocation","search","div","props","width","height","gap","columns","columnsWidth","columnsTemplate","rows","rowsHeight","rowsMinHeight","rowsMaxHeight","rowsAuto","rowsTemplate","columnGap","rowGap","Cell","columnPosition","columnSpan","columnStart","columnEnd","rowPosition","rowSpan","rowStart","rowEnd","ThumbnailGrid","child","Image","effect","wrapperClassName","Gallery","primaryPicture","pictures","onImageClick","src","url","alt","data-label","PageLayout","GalleryContainer","currFile","e","currentTarget","getAttribute","PicturePage","query","pathSplit","split","pop","parsePath","get","window","scrollTo","swrConfig","revalidateOnFocus","App","value","exact","render","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0734123.chunk.js","sourcesContent":["/**\r\n * explorePictures Query\r\n * Example: http://18.203.83.17/public/explorePictures?path=root\r\n * \r\n * Response Codes:\r\n * - 401 unauthorized request due to an incorrect or missing X-TOKEN header\r\n * - 404 the requested path was not found\r\n * - 599 random server error that can be thrown for any request\r\n * - 500 unknown server error\r\n * \r\n * Response Data Structure:\r\n * - type: the node type (0 = folder, 1 = image)\r\n * - label: the node name\r\n * - children: the child nodes of the node\r\n * \r\n * @param {string} path\r\n */\r\n\r\nimport useSWR from 'swr';\r\nimport { API_BASE_URL, API_TOKEN } from '../globals';\r\nimport { FileStructure } from '../modals/FileStructure';\r\n\r\nconst defaultConfig = {\r\n    method: 'GET',\r\n    headers: {\r\n        'X-TOKEN': API_TOKEN\r\n    }\r\n};\r\n\r\nexport const DEFAULT_PATH_PARAM = 'root';\r\n\r\nexport const getURL = (path: string): URL => new URL(`explorePictures?path=${path}`, API_BASE_URL);\r\n\r\nexport const useExplorePictures = (path = DEFAULT_PATH_PARAM) => useSWR<FileStructure, Error>(path, explorePictures);\r\n\r\nexport const explorePictures = (path = DEFAULT_PATH_PARAM, init: RequestInit = {}): Promise<FileStructure> => (\r\n    fetch(\r\n        getURL(path).toString(),\r\n        { ...defaultConfig, ...init }\r\n    )\r\n    .then(res => res.json())\r\n    .then(json => json.data)\r\n);","export const API_BASE_URL = 'http://18.203.83.17/public/';\r\nexport const API_TOKEN = '2d4e69f4823176197ccf41caa5ee6456';","export const filterAndJoinArray = (array: (string | number | undefined | null)[], separator: string | undefined = ',') => {\r\n    return array.filter(v => !!v).join(separator);\r\n};","import './TreeNode.css';\r\n\r\nimport styled from 'styled-components';\r\nimport classnames from 'classnames';\r\nimport { filterAndJoinArray } from 'utils/arrayUtils';\r\n\r\ninterface TreeNodeProps {\r\n    level?: number;\r\n    index?: number;\r\n    isRoot?: boolean;\r\n    selected?: boolean;\r\n    expandable?: boolean;\r\n    className?: string;\r\n}\r\n\r\nconst TreeNode = styled.button.attrs(({\r\n    className,\r\n    isRoot = false,\r\n    selected = false,\r\n    expandable = true\r\n}: TreeNodeProps) => ({\r\n    className: classnames(\r\n        'TreeNode',\r\n        isRoot && 'TreeNode--root',\r\n        selected && 'TreeNode--selected',\r\n        expandable && 'TreeNode--expandable',\r\n        className\r\n    )\r\n}))`\r\n    ${({ level, index }: TreeNodeProps) => filterAndJoinArray([\r\n        typeof level === 'number' ? `--level: ${level} !important;` : undefined,\r\n        typeof index === 'number' ? `--index: ${index} !important;` : undefined\r\n    ], '\\n')}\r\n`;\r\n\r\nexport default TreeNode;","import './Tree.css';\r\n\r\nimport { FOLDER_NODE_TYPE } from \"modals/FileStructure\";\r\nimport { NodeMetadata } from \"modals/NodeMetadata\";\r\nimport { DEFAULT_PATH_PARAM } from \"queries/explorePictures\";\r\nimport TreeNode from \"./TreeNode\";\r\n\r\nexport interface TreeProps {\r\n    nodeList: NodeMetadata[];\r\n    selectedPaths: string[];\r\n    handleNodeClick: (node: NodeMetadata) => void;\r\n}\r\n\r\nconst getRootMetadata = (): NodeMetadata => ({\r\n    path: DEFAULT_PATH_PARAM,\r\n    parentPath: null,\r\n    level: 0,\r\n    node: {\r\n        label: DEFAULT_PATH_PARAM,\r\n        type: FOLDER_NODE_TYPE\r\n    }\r\n});\r\n\r\nconst Tree = ({\r\n    nodeList,\r\n    selectedPaths,\r\n    handleNodeClick\r\n}: TreeProps) => {\r\n    let currIndex = -1;\r\n    let prevLevel = 0;\r\n    \r\n    return (\r\n        <div className=\"Tree\">\r\n            <TreeNode\r\n                isRoot={true}\r\n                selected={selectedPaths.indexOf(DEFAULT_PATH_PARAM) > -1}\r\n                children=\"R\"\r\n                onClick={() => {\r\n                    handleNodeClick(getRootMetadata());\r\n                }}\r\n            />\r\n            {nodeList.map(({ path, node, level, parentPath }) => {\r\n                currIndex++;\r\n\r\n                if (level > prevLevel) {\r\n                    currIndex = 0;\r\n                }\r\n\r\n                prevLevel = level;\r\n\r\n                return (\r\n                    <TreeNode\r\n                        key={path}\r\n                        level={level}\r\n                        index={currIndex}\r\n                        expandable={node.type === FOLDER_NODE_TYPE}\r\n                        selected={selectedPaths.indexOf(path) > -1}\r\n                        onClick={() => {\r\n                            handleNodeClick({\r\n                                path,\r\n                                parentPath,\r\n                                node,\r\n                                level\r\n                            });\r\n                        }}\r\n                    />\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Tree;","export const FOLDER_NODE_TYPE = 0;\r\nexport const IMAGE_NODE_TYPE = 1;\r\n\r\nexport interface FileStructureNode {\r\n    type: typeof FOLDER_NODE_TYPE | typeof IMAGE_NODE_TYPE;\r\n    label: string;\r\n    url?: string;\r\n}\r\n\r\nexport interface FileStructure {\r\n    type: typeof FOLDER_NODE_TYPE;\r\n    label: string;\r\n    children: FileStructureNode[];\r\n}","export const buildPath = (label: string, root: string) => `${root}/${label}`;\r\n\r\nexport const parsePath = (path: string | null): { label: string | null; parentPath: string | null } => {\r\n    if (!path) {\r\n        return {\r\n            label: null,\r\n            parentPath: null\r\n        };\r\n    }\r\n\r\n    const pathSplit = path.split('/');\r\n    const label = (pathSplit.length > 1 ? pathSplit.pop() : pathSplit[0]) || null;\r\n    const parentPath = pathSplit.join('/');\r\n\r\n    return {\r\n        label,\r\n        parentPath\r\n    };\r\n};","import useSWR from 'swr';\r\nimport { useState, useEffect, ReactElement } from 'react';\r\nimport { buildPath } from 'utils/pathUtils';\r\nimport { NodeMetadata } from 'modals/NodeMetadata';\r\nimport { FileStructure, FOLDER_NODE_TYPE, IMAGE_NODE_TYPE } from 'modals/FileStructure';\r\nimport { DEFAULT_PATH_PARAM, explorePictures } from 'queries/explorePictures';\r\nimport { TreeProps } from 'components/tree/Tree';\r\n\r\ninterface TreeContainerProps {\r\n    redirect?: (path: string) => void; \r\n    children: (props: TreeProps) => ReactElement;\r\n}\r\n\r\nconst TreeContainer = ({\r\n    children,\r\n    redirect = () => {}\r\n}: TreeContainerProps) => {\r\n    const [ selectedPaths, setSelectedPaths ] = useState<string[]>([]);\r\n    const [ currentPath, setCurrentPath ] = useState<string | null>(null);\r\n    const [ nodeList, setNodeList ] = useState<NodeMetadata[]>([]);\r\n    const { error, data } = useSWR<FileStructure, Error>(currentPath, explorePictures);\r\n\r\n    const getNodeByPath = (path: string) => {\r\n        return nodeList.find(({ path: currentPath }) => currentPath === path);\r\n    };\r\n\r\n    const clear = () => {\r\n        setCurrentPath(null);\r\n        setSelectedPaths([]);\r\n        setNodeList([]);\r\n    };\r\n\r\n    const toggleFolder = (path = DEFAULT_PATH_PARAM) => {\r\n        const isOpen = currentPath === path;\r\n        const metadata = getNodeByPath(path);\r\n\r\n        if (isOpen) {\r\n            //close\r\n            setCurrentPath(metadata?.parentPath || null);\r\n            setSelectedPaths(list => {\r\n                let sliced = list.slice(0, (metadata?.level || 0) + 1);\r\n\r\n                if (sliced.length === 1) {\r\n                    sliced = [];\r\n                }\r\n\r\n                return sliced;\r\n            });\r\n        } else {\r\n            //open\r\n            setCurrentPath(path);\r\n            setSelectedPaths(list => {\r\n                const sliced = list.slice(0, (metadata?.level || 0) + 1);\r\n\r\n                if (sliced.indexOf(path) === -1) {\r\n                    sliced.push(path);\r\n                }\r\n\r\n                return sliced;\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!!error) {\r\n            alert(error.message);\r\n        }\r\n    }, [ error ]);\r\n\r\n    useEffect(() => {\r\n        if (!currentPath) {\r\n            clear();\r\n        }\r\n    }, [ currentPath ]);\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            const path = currentPath || DEFAULT_PATH_PARAM;\r\n            const metadata = getNodeByPath(path);\r\n            const level = typeof metadata?.level === 'number' ? metadata.level + 1 : 0;\r\n\r\n            setNodeList(nodeList => {\r\n                nodeList = nodeList.filter(metadata => metadata.level < level);\r\n\r\n                data.children.forEach(node => {\r\n                    nodeList.push({\r\n                        node,\r\n                        level,\r\n                        parentPath: currentPath,\r\n                        path: buildPath(node.label, path)\r\n                    });\r\n                });\r\n\r\n                return nodeList;\r\n            });\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [ data ]);\r\n\r\n    return (\r\n        <>\r\n            {children({\r\n                nodeList:nodeList,\r\n                selectedPaths:selectedPaths,\r\n                handleNodeClick:({ node, path }) => {\r\n                    switch (node.type) {\r\n                        case FOLDER_NODE_TYPE:\r\n                            toggleFolder(path);\r\n                            break;\r\n                        case IMAGE_NODE_TYPE:\r\n                            redirect(`/picture?path=${path}`);\r\n                            break;\r\n                    }\r\n                }\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TreeContainer;","import { useHistory } from 'react-router-dom';\r\nimport Tree from 'components/tree/Tree';\r\nimport TreeContainer from 'components/containers/TreeContainer';\r\n\r\n\r\nconst HomePage = () => {\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <TreeContainer\r\n            redirect={history.push}\r\n            children={Tree}\r\n        />\r\n    );\r\n};\r\n\r\nexport default HomePage;","import { useLocation } from \"react-router-dom\";\r\n\r\nconst useQuery = () => {\r\n    return new URLSearchParams(useLocation().search);\r\n};\r\n\r\nexport default useQuery;","import './Grid.css';\r\nimport styled from 'styled-components';\r\nimport classnames from 'classnames';\r\nimport { filterAndJoinArray } from 'utils/arrayUtils';\r\n\r\nexport interface GridProps {\r\n    width?: string;\r\n    height?: string;\r\n\tgap?: string;\r\n\tcolumns?: string | number;\r\n\tcolumnsWidth?: string;\r\n\tcolumnsTemplate?: string;\r\n\trows?: string | number;\r\n\trowsHeight?: string;\r\n\trowsMinHeight?: string;\r\n\trowsMaxHeight?: string;\r\n\trowsAuto?: string;\r\n\trowsTemplate?: string;\r\n\tcolumnGap?: string;\r\n    rowGap?: string;\r\n    className?: string;\r\n};\r\n\r\nexport default styled.div.attrs(({ className }) => ({ className: classnames('Grid', className) }))`\r\n    ${(props: GridProps) => {\r\n        return filterAndJoinArray([\r\n            props.width && `width: ${props.width};`,\r\n            props.height && `height: ${props.height};`,\r\n            props.gap && `--gap: ${props.gap};`,\r\n            props.columns && `--columns: ${props.columns};`,\r\n            props.columnsWidth && `--columns-width: ${props.columnsWidth};`,\r\n            props.columnsTemplate && `--columns-template: ${props.columnsTemplate};`,\r\n            props.rows && `--rows: ${props.rows};`,\r\n            props.rowsHeight && `--rows-height: ${props.rowsHeight};`,\r\n            props.rowsMinHeight && `--rows-min-height: ${props.rowsMinHeight};`,\r\n            props.rowsMaxHeight && `--rows-max-height: ${props.rowsMaxHeight};`,\r\n            props.rowsAuto && `--rows-auto: ${props.rowsAuto};`,\r\n            props.rowsTemplate && `--rows-template: ${props.rowsTemplate};`,\r\n            props.columnGap && `--column-gap: ${props.columnGap};`,\r\n            props.rowGap && `--row-gap: ${props.rowGap};`\r\n        ], '\\n')\r\n    }}\r\n`;","import styled from 'styled-components';\r\nimport classnames from 'classnames';\r\nimport { filterAndJoinArray } from 'utils/arrayUtils';\r\n\r\ninterface CellProps {\r\n    columnPosition?: string | number;\r\n    columnSpan?: string | number;\r\n    columnStart?: string;\r\n    columnEnd?: string;\r\n    rowPosition?: string | number;\r\n    rowSpan?: string | number;\r\n    rowStart?: string;\r\n    rowEnd?: string;\r\n};\r\n\r\nconst Cell = styled.div.attrs(({ className }) => ({ className: classnames('cell', className) }))`\r\n    ${(props: CellProps) => {\r\n        return filterAndJoinArray([\r\n            props.columnPosition && `--column-position: ${props.columnPosition} !important;`,\r\n            props.columnSpan && `--column-span: ${props.columnSpan} !important;`,\r\n            props.columnStart && `--column-start: ${props.columnStart} !important;`,\r\n            props.columnEnd && `--column-end: ${props.columnEnd} !important;`,\r\n            props.rowPosition && `--row-position: ${props.rowPosition} !important;`,\r\n            props.rowSpan && `--row-span: ${props.rowSpan} !important;`,\r\n            props.rowStart && `--row-start: ${props.rowStart} !important;`,\r\n            props.rowEnd && `--row-end: ${props.rowEnd} !important;`\r\n        ], '\\n')\r\n    }}\r\n`;\r\n\r\nexport default Cell;","import './ThumbnailGrid.css';\r\n\r\nimport { ReactNode } from 'react';\r\nimport classnames from 'classnames';\r\nimport Grid, { GridProps } from './Grid';\r\nimport Cell from './Cell';\r\n\r\ninterface ThumbnailGridProps extends GridProps {\r\n    children: ReactNode[];\r\n}\r\n\r\nconst ThumbnailGrid = ({\r\n    children,\r\n    className,\r\n    ...props\r\n}: ThumbnailGridProps) => (\r\n    <Grid\r\n        {...props}\r\n        columns={3}\r\n        gap=\"1rem\"\r\n        rowsHeight=\"16rem\"\r\n        className={classnames(\r\n            'ThumbnailGrid',\r\n            className\r\n        )}\r\n    >\r\n        {children.map((child, index) => (\r\n            <Cell key={index}>\r\n                {child}\r\n            </Cell>\r\n        ))}\r\n    </Grid>\r\n);\r\n\r\nexport default ThumbnailGrid;","import './Image.css';\r\n\r\nimport classnames from 'classnames';\r\nimport { LazyLoadImage, LazyLoadImageProps } from 'react-lazy-load-image-component';\r\n\r\ninterface ImageProps extends LazyLoadImageProps {\r\n    selected?: boolean;\r\n    className?: string;\r\n}\r\n\r\nconst Image = ({ className, selected = false, ...props }: ImageProps) => (\r\n    <LazyLoadImage\r\n        {...props}\r\n        effect=\"blur\"\r\n        className=\"Image__img\"\r\n        wrapperClassName={classnames(\r\n            'Image',\r\n            selected && 'Image--selected',\r\n            className\r\n        )}\r\n    />\r\n);\r\n\r\nexport default Image;","import './Gallery.css';\r\n\r\nimport { SyntheticEvent } from 'react';\r\nimport { FileStructureNode } from \"modals/FileStructure\";\r\nimport ThumbnailGrid from \"components/layouts/ThumbnailGrid\";\r\nimport Grid from \"components/layouts/Grid\";\r\nimport Cell from \"components/layouts/Cell\";\r\nimport Image from \"./Image\";\r\n\r\nexport interface GalleryProps {\r\n    primaryPicture: FileStructureNode;\r\n    pictures: FileStructureNode[];\r\n    onImageClick?: (e: SyntheticEvent) => any;\r\n}\r\n\r\nconst Gallery = ({\r\n    primaryPicture,\r\n    pictures,\r\n    onImageClick\r\n}: GalleryProps) => (\r\n    <Grid className=\"Gallery\" rows={2} columns={1}>\r\n        <Cell className=\"primaryPictureWrapper\">\r\n            <Image src={primaryPicture.url} alt={primaryPicture.label} />\r\n        </Cell>\r\n        <Cell>\r\n            <ThumbnailGrid height=\"100%\">\r\n                {(pictures || []).map(({ label, url }) => (\r\n                    <Image\r\n                        key={label}\r\n                        src={url}\r\n                        alt={label}\r\n                        data-label={label}\r\n                        selected={primaryPicture.url === url}\r\n                        onClick={onImageClick}\r\n                        className=\"thumbnail\"\r\n                    />\r\n                ))}\r\n            </ThumbnailGrid>\r\n        </Cell>\r\n    </Grid>\r\n);\r\n\r\nexport default Gallery;","import styled from 'styled-components';\r\n\r\nconst PageLayout = styled.div`\r\n    width: 100%;\r\n    margin: 0 auto;\r\n    padding: 1rem;\r\n\r\n    @media(min-width: 1200px) {\r\n        width: 1200px;\r\n    }\r\n`;\r\n\r\nexport default PageLayout;","import useSWR from 'swr';\r\nimport { ReactElement } from 'react';\r\nimport { FileStructure, IMAGE_NODE_TYPE } from 'modals/FileStructure';\r\nimport { explorePictures } from 'queries/explorePictures';\r\nimport { buildPath } from 'utils/pathUtils';\r\nimport { GalleryProps } from 'components/gallery/Gallery';\r\n\r\ninterface GalleryContainerProps {\r\n    label: string | null;\r\n    parentPath: string;\r\n    redirect?: (path: string) => void; \r\n    children: (props: GalleryProps) => ReactElement;\r\n}\r\n\r\nconst GalleryContainer = ({\r\n    label,\r\n    parentPath,\r\n    children,\r\n    redirect = () => {}\r\n}: GalleryContainerProps) => {\r\n    const { error, data } = useSWR<FileStructure, Error>(parentPath, explorePictures);\r\n    const currFile = data?.children.find(({ label: currLabel }) => currLabel === label);\r\n    const pictures = data?.children.filter(({ type }) => type === IMAGE_NODE_TYPE);\r\n\r\n    if (!!error) {\r\n        return <div>Error occurred!</div>;\r\n    }\r\n\r\n    if (!data) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    if (currFile?.type !== IMAGE_NODE_TYPE) {\r\n        return <div>Path provided is not an image</div>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {children({\r\n                primaryPicture: currFile,\r\n                pictures: pictures || [],\r\n                onImageClick: (e) => {\r\n                    const target = e.currentTarget as HTMLElement;\r\n                    const label = target.getAttribute('data-label');\r\n    \r\n                    if (label) {\r\n                        redirect(`/picture?path=${buildPath(label, parentPath)}`);\r\n                    }\r\n                }\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GalleryContainer;","import { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { parsePath } from 'utils/pathUtils';\r\nimport useQuery from 'hooks/useQuery';\r\nimport Gallery from 'components/gallery/Gallery';\r\nimport PageLayout from 'components/layouts/PageLayout';\r\nimport GalleryContainer from 'components/containers/GalleryContainer';\r\n\r\nconst PicturePage = () => {\r\n    const query = useQuery();\r\n    const history = useHistory();\r\n    const { label, parentPath } = parsePath(query.get('path'));\r\n\r\n    useEffect(() => {\r\n        if (label) {\r\n            window.scrollTo(0, 0);\r\n        }\r\n    }, [ label ]);\r\n\r\n    if (parentPath === null) {\r\n        return <div>Path was not provided</div>;\r\n    }\r\n\r\n    return (\r\n        <PageLayout>\r\n            <GalleryContainer\r\n                label={label}\r\n                parentPath={parentPath}\r\n                redirect={history.push}\r\n                children={Gallery}\r\n            />\r\n        </PageLayout>\r\n    );\r\n};\r\n\r\nexport default PicturePage;","import { HashRouter, BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport { SWRConfig } from 'swr';\nimport HomePage from 'pages/HomePage';\nimport PicturePage from 'pages/PicturePage';\n\nconst swrConfig = {\n    revalidateOnFocus: false\n};\n\nconst App = () => (\n    <SWRConfig value={swrConfig}>\n        {/* BrowserRouter was replaced with HashRouter to work with Github Pages */}\n        <HashRouter>\n            <div className=\"App\">\n                <Switch>\n                    <Route\n                        exact\n                        path=\"/\"\n                        render={() => <Redirect to=\"/home\" />}\n                    />\n                    <Route exact path=\"/picture\">\n                        <PicturePage />\n                    </Route>\n                    <Route exact path=\"/home\">\n                        <HomePage />\n                    </Route>\n                </Switch>\n            </div>\n        </HashRouter>\n    </SWRConfig>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}